package game

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestBoardCreation(t *testing.T) {
	assert := assert.New(t)
	var err error
	_, err = NewBoard(0)
	assert.Error(err)
	_, err = NewBoard(-2)
	assert.Error(err)
	_, err = NewBoard(5)
	assert.NoError(err)
}

func TestPointsWellCreated(t *testing.T) {
	assert := assert.New(t)
	b, _ := NewBoard(5)
	assert.Equal(3, b.Field[3][4].X)
	assert.Equal(4, b.Field[3][4].Y)
	assert.Equal(0, b.Field[0][0].X)
	assert.Equal(0, b.Field[2][0].Y)
	assert.Len(b.Field[0][0].neighbords, 2)
	assert.Len(b.Field[0][4].neighbords, 2)
	assert.Len(b.Field[4][0].neighbords, 2)
	assert.Len(b.Field[4][4].neighbords, 2)
	assert.Len(b.Field[3][3].neighbords, 4)
	assert.Contains(b.Field[3][3].neighbords, &b.Field[3][4])
	assert.Contains(b.Field[3][3].neighbords, &b.Field[3][2])
	assert.NotEmpty(b.Field[0][0].neighbords)
	assert.Contains(b.Field[0][0].neighbords, &b.Field[1][0])
	assert.NotContains(b.Field[0][0].neighbords, &b.Field[3][3])
}

func TestBoardPlay(t *testing.T) {
	assert := assert.New(t)
	b, _ := NewBoard(5)
	var err error
	err = b.Play(-1, 0, true)
	assert.Error(err)
	err = b.Play(0, 5, true)
	assert.Error(err)
	err = b.Play(0, 6, true)
	assert.Error(err)
	err = b.Play(1, 1, true)
	assert.NoError(err)
	err = b.Play(1, 1, false)
	assert.Error(err)
	err = b.Play(1, 2, false)
	assert.NoError(err)
	err = b.Play(1, 3, true)
	assert.NoError(err)
	err = b.Play(1, 4, true)
	assert.Error(err)
	err = b.Play(1, 4, false)
	assert.NoError(err)
	err = b.Play(1, 2, false)
	assert.Error(err)
}

func TestChains(t *testing.T) {
	assert := assert.New(t)
	b, _ := NewBoard(5)
	b.Play(1, 1, true)
	assert.Equal(1, len(b.Chains))
	assert.Contains(b.Chains, 1)
	assert.Equal(1, len(b.Chains[1].points))
	assert.Equal(4, b.Chains[1].liberties)
	assert.Same(&b.Field[1][1], b.Chains[1].points[0])
	b.Play(1, 2, false)
	assert.Equal(2, len(b.Chains))
	assert.Contains(b.Chains, 2)
	assert.Equal(1, len(b.Chains[2].points))
	assert.Equal(3, b.Chains[1].liberties)
	assert.Equal(3, b.Chains[2].liberties)
	assert.Same(&b.Field[1][2], b.Chains[2].points[0])
	b.Play(2, 1, true)
	assert.Equal(2, len(b.Chains))
	assert.Contains(b.Chains, 1)
	assert.Equal(2, len(b.Chains[1].points))
	assert.Equal(5, b.Chains[1].liberties)
	assert.Same(&b.Field[2][1], b.Chains[1].points[1])
	b.Play(2, 2, false)
	assert.Equal(2, len(b.Chains))
	assert.Contains(b.Chains, 2)
	assert.Equal(2, len(b.Chains[2].points))
	assert.Equal(4, b.Chains[2].liberties)
	assert.Same(&b.Field[2][2], b.Chains[2].points[1])
	b.Play(3, 2, true)
	assert.Equal(3, len(b.Chains))
	assert.Contains(b.Chains, 3)
	assert.Equal(1, len(b.Chains[3].points))
	assert.Equal(4, b.Chains[1].liberties)
	assert.Equal(3, b.Chains[2].liberties)
	assert.Equal(3, b.Chains[3].liberties)
	assert.Same(&b.Field[3][2], b.Chains[3].points[0])
	b.Play(2, 3, false)
	assert.Equal(3, len(b.Chains))
	assert.Contains(b.Chains, 2)
	assert.Equal(3, len(b.Chains[2].points))
	assert.Equal(4, b.Chains[1].liberties)
	assert.Equal(4, b.Chains[2].liberties)
	assert.Equal(3, b.Chains[3].liberties)
	assert.Same(&b.Field[2][3], b.Chains[2].points[2])
	b.Play(3, 1, true)
	assert.Equal(2, len(b.Chains))
	assert.Contains(b.Chains, 1)
	assert.NotContains(b.Chains, 3)
	assert.Equal(4, len(b.Chains[1].points))
	assert.Equal(7, b.Chains[1].liberties)
	assert.Equal(4, b.Chains[2].liberties)
	assert.Same(&b.Field[3][1], b.Chains[1].points[2])
	b.Play(4, 4, false)
	assert.Equal(3, len(b.Chains))
	assert.Contains(b.Chains, 3)
	assert.Equal(1, len(b.Chains[3].points))
	assert.Equal(7, b.Chains[1].liberties)
	assert.Equal(4, b.Chains[2].liberties)
	assert.Equal(2, b.Chains[3].liberties)
	assert.Same(&b.Field[4][4], b.Chains[3].points[0])
}
